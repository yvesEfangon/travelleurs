{#{% extends "FOSUserBundle::layout.html.twig" %}#}

{% block fos_user_content %}
{% include "FOSUserBundle:Profile:edit_content.html.twig" %}
{% endblock fos_user_content %}

{{ include('AppBundle::default-scripts.js.twig') }}

<script type="application/javascript">
  var autocompleteProfile;

    function initAutocompleteProfile() {
        // Create the autocompleteProfile object, restricting the search to geographical
        // location types.
        autocompleteProfile = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementsByClassName('js-address')[0]),
            {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocompleteProfile.addListener('place_changed',fillInAddressProfile);
    }

    function fillInAddressProfile() {
        // Get the place details from the autocompleteProfile object.
        var place = autocompleteProfile.getPlace();
        //console.log(autocompleteProfile);
        if(place){

            document.getElementsByClassName('js-gmaps-lat')[0].value= place.geometry.location.lat();
            document.getElementsByClassName('js-gmaps-lng')[0].value = place.geometry.location.lng();

            if(place.place_id)
                document.getElementsByClassName('js-gmaps-placeId')[0].value    = place.place_id;

            var addressComponent    = place.address_components;
            var locality,administrative_area,country;

            for (var i = 0; i < addressComponent.length; i++){
                var value = addressComponent[i];
                var types = value.types;
                var type0 = types[0];
                switch (type0){
                    case 'locality':
                        locality = value.long_name;
                        break;
                    case 'administrative_area_level_1':
                        administrative_area = value.long_name;
                        break;
                    case 'country':
                        country = value.long_name;
                        break;
                }

            }

            document.getElementsByClassName('js-gmaps-locality')[0].value = locality;
            document.getElementsByClassName('js-gmaps-administrative_area')[0].value =administrative_area;
            document.getElementsByClassName('js-gmaps-country')[0].value = country;


        }else{
            window.alert("No details available for input: '" + place.name + "'");
            return;
        }
    }

    // Bias the autocompleteProfile object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocateProfil() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle({
                    center: geolocation,
                    radius: position.coords.accuracy
                });
                autocompleteProfile.setBounds(circle.getBounds());
            });
        }
    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBYZqbrjgb550hqzFuZT0I5v5IFaZ4ouKw&libraries=places&callback=initAutocompleteProfile"    async defer></script>
