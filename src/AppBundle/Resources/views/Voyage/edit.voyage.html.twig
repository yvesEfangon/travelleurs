{% for type, flashes in app.session.flashBag.all() %}
    {% for flash in flashes %}
        <div class="alert alert-{{ type }}">
            {{ flash }}
        </div>
    {% endfor %}
{% endfor %}
<div class="well well-sm">
    {{ form_start(formVoyage) }}

    <div class="row">
        <div class="col-lg-4 col-md-4 col-xs-4"><span class="w3-badge w3-jumbo w3-padding trav-secondary-bg-color">1</span></div>
        <div class="col-lg-4 col-md-4 col-xs-4 center-block"><p class="text-center">{{ 'trav.creation'|trans }}</p></div>
        <div class="col-lg-4 col-md-4 col-xs-4">
            <i class="fa fa-pencil-square fa-3x pull-right"></i>
        </div>
    </div>
    <div id="trav-creation">
        <div class="row">
            <div class="col-lg-6 col-md-6 col-xs-6">
                {{ 'trav_how_will_you_travel'|trans }}
                {{ form_widget(formVoyage.ownerIsAlone) }}
            </div>
            <div class="col-lg-6 col-md-6 col-xs-6">
                {{ 'trav.travelers.genre'|trans }}
                {{ form_widget(formVoyage.genreVoyageurs) }}
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-xs-6">
                {{ 'trav.smocker.allowed'|trans }}
                {{ form_widget(formVoyage.smockerAllowed) }}
            </div>
            <div class="col-lg-6 col-md-6 col-xs-6">
                {{ 'trav.show.to.perfect.match'|trans }}
                {{ form_widget(formVoyage.strict_criteria) }}
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-xs-6">
                {{ 'trav.estimated.budget'|trans }}
                {{ form_widget(formVoyage.budget) }}
            </div>
            <div class="col-lg-6 col-md-6 col-xs-6">
                {{ 'trav.currency'|trans }}
                {{ form_widget(formVoyage.currency) }}
            </div>
        </div>
        <div class="row w3-margin-12 w3-center">
            <input class="w3-center btn btn-lg trav-secondary-bg-color w3-text-white" type="submit" value="{{ 'trav.save.action'|trans }}">
        </div>
    </div>
    {{ form_end(formVoyage) }}
</div>

<div class="well well-sm">
    <div class="row">
        <div class="col-lg-4 col-md-4 col-xs-4"><span class="w3-badge w3-jumbo w3-padding trav-secondary-bg-color">2</span></div>
        <div class="col-lg-4 col-md-4 col-xs-4 center-block"><p class="text-center">{{ 'trav.details'|trans }}</p></div>
        <div class="col-lg-4 col-md-4 col-xs-4">
            <i class="fa fa-list fa-3x pull-right"></i>
        </div>
    </div>
    <div class="row">
        {% if ExistingEtapes is defined and ExistingEtapes|length>0 %}
            <table class="table">
                <thead class="thead-inverse">
                    <tr>
                        <th>
                            {{ 'trav.departure'|trans }}
                        </th>
                        <th>
                            {{ 'trav.arrival'|trans }}
                        </th>
                        <th>

                        </th>
                    </tr>
                </thead>
            {% for etape in ExistingEtapes %}
                <tr>
                    <td>
                        <p>{{ 'trav.from'|trans }}:  {{ etape.lieuDepart.address }}<br>
                        <small class="text-success">{{ 'trav.on'|trans }}: {{ etape.dateDepart|date('Y/m/d') }}</small></p>
                    </td>
                    <td>
                        <p>{{ 'trav.to'|trans }}:  {{ etape.lieuArrivee.address }}<br>
                        <small class="text-success">{{ 'trav.on'|trans }}: {{ etape.dateArrivee|date('Y/m/d') }}</small></p>
                    </td>
                    <td>
                        <a title="Delete" href="{{ path('trav_remove_etape',{'id':etape.id}) }}"><i class="text-danger fa fa-times-circle"></i></a>
                    </td>
                </tr>
            {% endfor %}
            </table>
        {% endif %}
    </div>
    {{ form_start(formEtape) }}
    <div class="row">
        <div class="col-lg-6 col-md-6 col-xs-6">
            {{ 'trav.departure.city'|trans }}
            {{ form_widget(formEtape.lieuDepart.address) }}
        </div>
        <div class="col-lg-6 col-md-6 col-xs-6">
            {{ 'trav.arrival.city'|trans }}
            {{ form_widget(formEtape.lieuArrivee.address) }}
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6 col-md-6 col-xs-6">
            {{ 'trav.departure.date'|trans }}
            {{ form_widget(formEtape.dateDepart) }}
        </div>
        <div class="col-lg-6 col-md-6 col-xs-6">
            {{ 'trav.arrival.date'|trans }}
            {{ form_widget(formEtape.dateArrivee) }}
        </div>
    </div>
    <div class="row w3-margin-12 w3-center">
        <input class="w3-center btn btn-lg trav-secondary-bg-color w3-text-white" type="submit" value="{{ 'trav.add.action'|trans }}">
    </div>
   <div class="hidden">
       {{ form_rest(formEtape) }}
   </div>
    {{ form_end(formEtape) }}
</div>

{{ include('AppBundle::default-scripts.js.twig') }}
<script>
var autocompleteEdit1;
var autocompleteEdit2;

function initAutocompleteEtape() {
// Create the autocompleteProfile object, restricting the search to geographical
// location types.
    autocompleteEdit1 = new google.maps.places.Autocomplete(
                    (document.getElementById('app_bundle_etape_type_lieuDepart_address')),
                    {types: ['geocode']}
                    );
    autocompleteEdit2 = new google.maps.places.Autocomplete(
                    (document.getElementById('app_bundle_etape_type_lieuArrivee_address')),
                    {types: ['geocode']}
                    );

// When the user selects an address from the dropdown, populate the address
// fields in the form.
    autocompleteEdit1.addListener('place_changed',fillInAddressEtape1);
    autocompleteEdit2.addListener('place_changed',fillInAddressEtape2);
}

function fillInAddressEtape1() {
// Get the place details from the autocompleteProfile object.
var place = autocompleteEdit1.getPlace();

if(place){

document.getElementById('app_bundle_etape_type_lieuDepart_lat').value= place.geometry.location.lat();
document.getElementById('app_bundle_etape_type_lieuDepart_lng').value = place.geometry.location.lng();

if(place.place_id)
document.getElementById('app_bundle_etape_type_lieuDepart_placeId').value    = place.place_id;

var addressComponent    = place.address_components;
var locality,administrative_area,country;

for (var i = 0; i < addressComponent.length; i++){
    var value = addressComponent[i];
    var types = value.types;
    var type0 = types[0];
    switch (type0){
        case 'locality':
        locality = value.long_name;
        break;
        case 'administrative_area_level_1':
        administrative_area = value.long_name;
        break;
        case 'country':
        country = value.long_name;
        break;
    }

}

document.getElementById('app_bundle_etape_type_lieuDepart_locality').value = locality;
document.getElementById('app_bundle_etape_type_lieuDepart_administrative_area').value =administrative_area;
document.getElementById('app_bundle_etape_type_lieuDepart_country').value = country;


}else{
window.alert("No details available for input: '" + place.name + "'");
return;
}
}

function fillInAddressEtape2() {
// Get the place details from the autocompleteProfile object.
var place = autocompleteEdit2.getPlace();
//console.log(autocompleteProfile);
if(place){

document.getElementById('app_bundle_etape_type_lieuArrivee_lat').value= place.geometry.location.lat();
document.getElementById('app_bundle_etape_type_lieuArrivee_lng').value = place.geometry.location.lng();

if(place.place_id)
document.getElementById('app_bundle_etape_type_lieuArrivee_placeId').value    = place.place_id;

var addressComponent    = place.address_components;
var locality,administrative_area,country;

for (var i = 0; i < addressComponent.length; i++){
    var value = addressComponent[i];
    var types = value.types;
    var type0 = types[0];
    switch (type0){
        case 'locality':
        locality = value.long_name;
        break;
        case 'administrative_area_level_1':
        administrative_area = value.long_name;
        break;
        case 'country':
        country = value.long_name;
        break;
    }

}

document.getElementById('app_bundle_etape_type_lieuArrivee_locality').value = locality;
document.getElementById('app_bundle_etape_type_lieuArrivee_administrative_area').value =administrative_area;
document.getElementById('app_bundle_etape_type_lieuArrivee_country').value = country;


}else{
window.alert("No details available for input: '" + place.name + "'");
return;
}
}

// Bias the autocompleteProfile object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocateProfil() {
if (navigator.geolocation) {
navigator.geolocation.getCurrentPosition(function(position) {
var geolocation = {
lat: position.coords.latitude,
lng: position.coords.longitude
};
var circle = new google.maps.Circle({
center: geolocation,
radius: position.coords.accuracy
});
    autocompleteEdit1.setBounds(circle.getBounds());
    autocompleteEdit2.setBounds(circle.getBounds());
});
}
}
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBYZqbrjgb550hqzFuZT0I5v5IFaZ4ouKw&libraries=places&callback=initAutocompleteEtape"    async defer></script>